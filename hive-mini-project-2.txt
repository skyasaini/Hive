Objective - The assignment is meant for you to apply learnings of the module on Hive on a real-life dataset. One of the major objectives of this assignment is gaining
            familiarity with how an analysis works in Hive and how you can gain insights from large datasets.
           
           
Problem Statement - New York City is a thriving metropolis and just like most other cities of similar size, one of the biggest
                    problems its residents face is parking. The classic combination of a huge number of cars and a cramped geography is the exact
                    recipe that leads to a large number of parking tickets.
                  
In an attempt to scientifically analyse this phenomenon, the NYC Police Department regularly collects data related to parking 
tickets. This data is made available by NYC Open Data portal. We will try and perform some analysis on this data.

Download Dataset - https://data.cityofnewyork.us/browse?q=parking+tickets

Note: Consider only the year 2017 for analysis and not the Fiscal year.

hive>            create table parking_violations_issued
            (
            Summons_Number bigint,
            Plate_ID string,
            Registration_State string,
            Plate_Type string,
            Issue_Date string,
            Violation_Code int,
            Vehicle_Body_Type string,
            Vehicle_Make string,
            Issuing_Agency string,
            Street_Code1 int,
            Street_Code2 int,
            Street_Code3 int,
            Vehicle_Expiration string,	
            Violation_Location int,
            Violation_Precinct int,
            Issuer_Precinct int,
            Issuer_Code int,
            Issuer_Command string,
            Issuer_Squad string,
            Violation_Time string,
            Time_First_Observed string,
            Violation_County string,
            Violation_In_Front_Of_Or_Opposite string,
            House_Number string,
            Street_Name string,
            Intersecting_Street string,
            Date_First_Observed int,
            Law_Section int,
            Sub_Division string,
            Violation_Legal_Code string,
            Days_Parking_In_Effect string,
            From_Hours_In_Effect string,
            To_Hours_In_Effect string,
            Vehicle_Color string,
            Unregistered_Vehicle int,
            Vehicle_Year string,
            Meter_Number string,
            Feet_From_Curb int,
            Violation_Post_Code string,
            Violation_Description string,
            No_Standing_or_Stopping_Violation string,
            Hydrant_Violation string,
            Double_Parking_Violation string)
            row format delimited
            fields terminated by ','
            tblproperties ("skip.header.line.count" = "1");
            
            load data local inpath'file///home/cloudera/Parking_Violations_Issued_-_Fiscal_Year_2017.csv' into table parking_violations_issued;
            
            select * from parking_violations_issued limit 5;

Creating Partitions on Violation Country and Buckets on Summons_Number:

            create table parking_violations_2017
            (
            Summons_Number bigint,
            Plate_ID string,
            Registration_State string,
            Plate_Type string,
            Issue_Date int,
            Violation_Code int,
            Vehicle_Body_Type string,
            Vehicle_Make string,
            Issuing_Agency string,
            Street_Code1 int,
            Street_Code2 int,
            Street_Code3 int,
            Vehicle_Expiration string,	
            Violation_Location int,
            Violation_Precinct int,
            Issuer_Precinct int,
            Issuer_Code int,
            Issuer_Command string,
            Issuer_Squad string,
            Violation_Time string,
            Time_First_Observed string,
            Violation_In_Front_of_or_Opposite string,
            House_Number string,
            Street_Name string,
            Intersecting_Street string,
            Date_First_Observed int,
            Law_Section int,
            Sub_Division string,
            Violation_Legal_Code string,
            Days_Parking_In_Effect string,
            From_Hours_In_Effect string,
            To_Hours_In_Effect string,
            Vehicle_Color string,
            Unregistered_Vehicle int,
            Vehicle_Year string,
            Meter_Number string,
            Feet_From_Curb int,
            Violation_Post_Code string,
            Violation_Description string,
            No_Standing_or_Stopping_Violation string,
            Hydrant_Violation string,
            Double_Parking_Violation string)
            partitioned by (Violation_County string)
            CLUSTERED BY (Summons_Number) sorted by (Summons_Number) INTO 8 BUCKETS
            row format delimited
            fields terminated by ','
            tblproperties ("skip.header.line.count" = "1");


Set few properties to enable bucketing and Dynamic partition
            hive>set hive.exec.dynamic.partition=true;
            hive>set hive.exec.dynamic.partition.mode=nonstrict; 
            hive>set hive.enforce.bucketing = true;
            
            insert overwrite table parking_violations_2017
            partition(Violation_County) Select 
            Summons_Number,
            Plate_ID,
            Registration_State,
            Plate_Type,
            unix_timestamp(Issue_Date,'MM/DD/YYYY'),
            Violation_Code,
            Vehicle_Body_Type,
            Vehicle_Make,
            Issuing_Agency,
            Street_Code1,
            Street_Code2,
            Street_Code3,
            Vehicle_Expiration,
            Violation_Location,
            Violation_Precinct,
            Issuer_Precinct,
            Issuer_Code,
            Issuer_Command,
            Issuer_Squad,
            Violation_Time,
            Time_First_Observed,
            Violation_In_Front_Of_Or_Opposite,
            House_Number,
            Street_Name,
            Intersecting_Street,
            Date_First_Observed,
            Law_Section,
            Sub_Division,
            Violation_Legal_Code,
            Days_Parking_In_Effect,
            From_Hours_In_Effect,
            To_Hours_In_Effect,
            Vehicle_Color,
            Unregistered_Vehicle,
            Vehicle_Year,
            Meter_Number,
            Feet_From_Curb,
            Violation_Post_Code,
            Violation_Description,
            No_Standing_or_Stopping_Violation,
            Hydrant_Violation,
            Double_Parking_Violation,
            Violation_County 
            from parking_violations_issued 
            where unix_timestamp(Issue_Date,'MM/DD/YYYY') between unix_timestamp('01/01/2017','MM/DD/YYYY') and unix_timestamp('12/31/2017','MM/DD/YYYY');

The analysis can be divided into two parts:

Part-I: Examine the data

1.) Find the total number of tickets for the year.
2.) Find out how many unique states the cars which got parking tickets came from.
3.) Some parking tickets don’t have addresses on them, which is cause for concern. Find out how many such tickets there are 
    (i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )

Part-II: Aggregation tasks

1.) How often does each violation code occur? (frequency of violation codes - find the top 5)
2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)
3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)
      b.) Issuer Precincts (this is the precinct that issued the ticket)
4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally 
    high frequency of certain violation codes?
5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. 
    Find a way to make this into a time attribute that you can use to divide into groups.
6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, 
    find the 3 most commonly occurring violations
7.) Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day 
    (in terms of the bins from the previous part)
8.) Let’s try and find some seasonality in this data
      a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. 
          (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, March); Summer(June, July, August); Fall(September, October,                    November); Winter(December, January, February))
      b.)Then, find the 3 most common violations for each of these seasons.
